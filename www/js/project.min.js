function wsProvider(){function e(e,n){function o(e){e=e||{},e.url&&(t.config.url=e.url),h.clientId=h.getUuid(),h.conn=new ab.Session(t.config.url,function(){console.log("Websocket connection established."),h.setStatus("connected"),h.conn.subscribe(h.clientId,function(e,t){h.onMessage(e,t)})},function(e){h.onClose(e)})}function r(e){switch(h.setStatus("disconnected"),e){case ab.CONNECTION_CLOSED:console.log("Connection was closed properly.");break;case ab.CONNECTION_UNREACHABLE:console.log("Websocket connection could not be established.");break;case ab.CONNECTION_UNSUPPORTED:console.log("Browser does not support WebSocket.");break;case ab.CONNECTION_LOST:default:console.log("Websocket connection lost.")}}function s(e,t){try{t.hasOwnProperty("eventName")?p(e,t):t.hasOwnProperty("callbackId")&&d(e,t)}catch(n){console.log(n)}return!1}function i(e,t){var n={clientId:h.clientId,token:h.token,actionPayload:t};h.conn.call(e,n)}function l(e,t){var o={clientId:h.clientId,token:h.token,callbackId:h.getCallbackId(),actionPayload:t},r=n.defer();return h.callbacks[o.callbackId]={time:new Date,cb:r},h.conn.call(e,o),r.promise}function a(e,t){return h.listeners[e]=t,!0}function c(){return v+=1,v>1e4&&(v=0),v}function u(){var e=sessionStorage.getItem("uuid");return null!==e?e:(e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0,n="x"==e?t:3&t|8;return n.toString(16)}),sessionStorage.setItem("uuid",e),e)}function d(t,n){n.hasOwnProperty("type")||console.log("Received invalid data message: Type is missing.");var o=n.callbackId,r=n.payload,s=n.type;h.callbacks.hasOwnProperty(o)?("success"===s?e.$apply(h.callbacks[o].cb.resolve(r)):"error"===s&&e.$apply(h.callbacks[o].cb.reject(n.reason)),delete h.callbacks[o]):console.log("Could not resolve callback.")}function p(e,t){var n=t.eventName,o=t.eventPayload;return h.listeners.hasOwnProperty(n)?h.listeners[n](o):void console.log("Could not find any listener for event: "+n)}function f(t){h.status=t,e.$broadcast("wsStatusChange",h.status)}function y(){return h.status}function m(e){h.token=e}var h={},v=0;return h.listeners=[],h.callbacks=[],h.clientId="",h.token="",h.status="disconnected",h.connect=o,h.onClose=r,h.onMessage=s,h.sendTriggerRequest=i,h.sendDataRequest=l,h.addListener=a,h.getCallbackId=c,h.getUuid=u,h.setStatus=f,h.getStatus=y,h.setToken=m,h}var t=this;this.config={url:"ws://127.0.0.1:8090"},this.$get=["$rootScope","$q",e],this.setUrl=function(e){return this.config.url=e,this}}var app=angular.module("shinyDeploy",["ngRoute","ws","angular-jwt","shinyDeploy.config"]);app.config(["$routeProvider","$locationProvider","wsProvider","shinyDeployConfig",function(e,t,n,o){t.html5Mode(!0),n.setUrl(o.wsUrl),e.when("/",{controller:"HomeController",controllerAs:"vm",templateUrl:"/js/app/views/home.html"}).when("/login",{controller:"LoginController",controllerAs:"vm",templateUrl:"/js/app/views/login.html"}).when("/servers",{controller:"ServersController",controllerAs:"vm",templateUrl:"/js/app/views/servers.html"}).when("/servers/add",{controller:"ServersAddController",controllerAs:"vm",templateUrl:"/js/app/views/servers_form.html"}).when("/servers/edit/:serverId",{controller:"ServersEditController",controllerAs:"vm",templateUrl:"/js/app/views/servers_form.html"}).when("/repositories",{controller:"RepositoriesController",controllerAs:"vm",templateUrl:"/js/app/views/repositories.html"}).when("/repositories/add",{controller:"RepositoriesAddController",controllerAs:"vm",templateUrl:"/js/app/views/repositories_form.html"}).when("/repositories/edit/:repositoryId",{controller:"RepositoriesEditController",controllerAs:"vm",templateUrl:"/js/app/views/repositories_form.html"}).when("/deployments",{controller:"DeploymentsController",controllerAs:"vm",templateUrl:"/js/app/views/deployments.html"}).when("/deployments/add",{controller:"DeploymentsAddController",controllerAs:"vm",templateUrl:"/js/app/views/deployments_form.html"}).when("/deployments/edit/:deploymentId",{controller:"DeploymentsEditController",controllerAs:"vm",templateUrl:"/js/app/views/deployments_form.html"}).when("/deployments/run/:deploymentId",{controller:"DeploymentsRunController",controllerAs:"vm",templateUrl:"/js/app/views/deployments_run.html"}).when("/backups",{controller:"BackupssController",controllerAs:"vm",templateUrl:"/js/app/views/backups.html"}).when("/backups/add",{controller:"BackupsAddController",controllerAs:"vm",templateUrl:"/js/app/views/backups_form.html"}).when("/backups/edit/:backupId",{controller:"BackupsEditController",controllerAs:"vm",templateUrl:"/js/app/views/backups_form.html"}).otherwise({redirectTo:"/login"})}]),app.run(["ws","auth",function(e,t){e.connect(),t.init()}]),function(){"use strict";function e(){function e(e){switch(e.itemType){case"A":e.itemTypeClass="label-success",e.itemTypeName="Added";break;case"C":e.itemTypeClass="label-info",e.itemTypeName="Copied";break;case"D":e.itemTypeClass="label-danger",e.itemTypeName="Deleted";break;case"M":e.itemTypeClass="label-primary",e.itemTypeName="Modified";break;case"R":e.itemTypeClass="label-info",e.itemTypeName="Renamed"}}var t={restrict:"A",template:'<span class="label {{ itemTypeClass }}">{{ itemTypeName }}</span>',scope:{itemType:"=type"},replace:!0,link:e};return t}angular.module("shinyDeploy").directive("changedFileStatus",e)}(),app.directive("ngReallyClick",[function(){return{restrict:"A",link:function(e,t,n){t.bind("click",function(){var t=n.ngReallyMessage;t&&confirm(t)&&e.$apply(n.ngReallyClick)})}}}]),function(){"use strict";function e(){function e(){}var n={restrict:"A",template:'<span class="fa fa-plug {{vm.statusClass}}"></span>',scope:{},replace:!0,link:e,controller:t,controllerAs:"vm",bindToController:!0};return n}function t(e){function t(e){switch(e){case"connected":n.statusClass="text-green";break;case"disconnected":n.statusClass="text-red"}}var n=this;n.statusClass="text-red",n.updateStatusClass=t;var o;o=e.$on("wsStatusChange",function(t,o){e.$apply(function(){n.updateStatusClass(o)})}),e.$on("$destroy",o)}angular.module("shinyDeploy").directive("wscStatus",e),t.$inject=["$scope","ws"]}(),angular.module("ws",[]).provider("ws",wsProvider),app.service("alertsService",["$rootScope",function(e){this.queue=[],this.pushAlert=function(t,n){n="undefined"!=typeof n?n:"info",e.$broadcast("alertMessage",t,n)},this.queueAlert=function(e,t){t="undefined"!=typeof t?t:"info";var n={type:t,message:e};this.queue.push(n)},this.getQueuedAlert=function(){return this.queue.shift()||""}}]),function(){"use strict";function e(e,t,n,o){function r(){var n=u();null!==n&&e.setToken(n),t.$on("$locationChangeStart",function(){s()}),e.addListener("unauthorized",function(e){i(e)})}function s(){return l()?!0:(n.path("/login"),!1)}function i(){return sessionStorage.removeItem("token"),n.path("/login"),!1}function l(){var e=u();if(null===e)return!1;try{if(o.isTokenExpired(e))return!1;var t=sessionStorage.getItem("uuid"),n=o.decodeToken(e);if(!n.hasOwnProperty("iss")||"ShinyDeploy"!==n.iss)return!1;if(!n.hasOwnProperty("jti")||n.jti!==t)return!1}catch(r){return!1}return!0}function a(t){var n={password:t};return e.sendDataRequest("login",n)}function c(t){sessionStorage.setItem("token",t),e.setToken(t)}function u(){return sessionStorage.getItem("token")}function d(){var t={username:"system"};return e.sendDataRequest("userExists",t)}function p(t,n){var o={username:"system",password:t,password_verify:n};return e.sendDataRequest("createUser",o)}var f={init:r,login:a,setToken:c,systemUserExists:d,createSystemUser:p};return f}angular.module("shinyDeploy").factory("auth",e),e.$inject=["ws","$rootScope","$location","jwtHelper"]}(),app.service("deploymentsService",["ws","$q",function(e,t){this.getDeployments=function(){return e.sendDataRequest("getDeployments")},this.getServers=function(){return e.sendDataRequest("getServers")},this.getRepositories=function(){return e.sendDataRequest("getRepositories")},this.getRepositoryBranches=function(t){var n={repositoryId:t};return e.sendDataRequest("getRepositoryBranches",n)},this.addDeployment=function(t){var n={deploymentData:t};return e.sendDataRequest("addDeployment",n)},this.deleteDeployment=function(t){var n={deploymentId:t};return e.sendDataRequest("deleteDeployment",n)},this.updateDeployment=function(t){var n={deploymentData:t};return e.sendDataRequest("updateDeployment",n)},this.getDeploymentData=function(n){if(0===n)return!1;var o=t.defer(),r={deploymentId:n};return e.sendDataRequest("getDeploymentData",r).then(function(e){e.hasOwnProperty("tasks")&&""===e.tasks&&(e.tasks=[]),e.server={},e.hasOwnProperty("server_id")&&(e.server={id:e.server_id}),e.repository={},e.hasOwnProperty("repository_id")&&(e.repository={id:e.repository_id}),e.branchObj={},e.hasOwnProperty("branch")&&(e.branchObj={id:e.branch}),o.resolve(e)}),o.promise},this.generateApiKey=function(t){var n={deploymentData:t};return e.sendDataRequest("generateApiKey",n)},this.addEventListener=function(t,n){e.addListener(t,n)},this.triggerJob=function(t,n){e.sendTriggerRequest(t,n)},this.getDeploymentLogs=function(t){var n={deploymentId:t};return e.sendDataRequest("getDeploymentLogs",n)}}]),app.service("repositoriesService",["ws",function(e){this.getRepositories=function(){return e.sendDataRequest("getRepositories")},this.addRepository=function(t){var n={repositoryData:t};return e.sendDataRequest("addRepository",n)},this.deleteRepository=function(t){var n={repositoryId:t};return e.sendDataRequest("deleteRepository",n)},this.updateRepository=function(t){var n={repositoryData:t};return e.sendDataRequest("updateRepository",n)},this.getRepositoryData=function(t){if(0===t)return!1;var n={repositoryId:t};return e.sendDataRequest("getRepositoryData",n)}}]),app.service("serversService",["ws",function(e){this.getServers=function(){return e.sendDataRequest("getServers")},this.addServer=function(t){var n={serverData:t};return e.sendDataRequest("addServer",n)},this.deleteServer=function(t){var n={serverId:t};return e.sendDataRequest("deleteServer",n)},this.updateServer=function(t){var n={serverData:t};return e.sendDataRequest("updateServer",n)},this.getServerData=function(t){if(0===t)return!1;var n={serverId:t};return e.sendDataRequest("getServerData",n)}}]),function(){"use strict";function e(e,t){function n(){var t=e.getDeployments();t.then(function(e){s.deployments=e},function(e){console.log("Error fetching deployments: "+e)})}function o(){return s.deployments}function r(n){e.deleteDeployment(n).then(function(){for(var e=s.deployments.length-1;e>=0;e--)if(s.deployments[e].id===n){s.deployments.splice(e,1);break}t.pushAlert("Deployment successfully deleted.","success")},function(e){t.pushAlert(e,"warning")})}var s=this;s.deployments=null,s.getDeployments=o,s.deleteDeployment=r,n()}angular.module("shinyDeploy").controller("DeploymentsController",e),e.$inject=["deploymentsService","alertsService"]}(),function(){"use strict";function e(e,t,n){function o(){t.getServers().then(function(e){d.servers=e},function(e){console.log("Error fetching servers: "+e)}),t.getRepositories().then(function(e){d.repositories=e},function(e){console.log("Error fetching repositories: "+e)})}function r(){d.deployment.server_id=d.deployment.server.id,d.deployment.repository_id=d.deployment.repository.id,d.deployment.branch=d.deployment.branchObj.id,t.addDeployment(d.deployment).then(function(){e.path("/deployments"),n.queueAlert("Deployment successfully added.","success")},function(e){n.pushAlert(e,"warning")})}function s(){t.getRepositoryBranches(d.deployment.repository.id).then(function(e){d.branches=e},function(e){n.pushAlert(e,"warning")})}function i(){d.taskFormMode="add",d.task={},jQuery("#editTaskModal").modal("show")}function l(e){d.task=d.deployment.tasks[e],d.taskFormMode="edit",jQuery("#editTaskModal").modal("show")}function a(){d.deployment.hasOwnProperty("tasks")||(d.deployment.tasks=[]),d.deployment.tasks.push(d.task),d.task={},jQuery("#editTaskModal").modal("hide")}function c(){d.task={},jQuery("#editTaskModal").modal("hide")}function u(e){d.deployment.tasks.splice(e,1)}var d=this;d.isAdd=!0,d.deployment={},d.servers={},d.repositories={},d.branches={},d.task={},d.taskFormMode="add",d.addDeployment=r,d.refreshBranches=s,d.showAddTask=i,d.showEditTask=l,d.addTask=a,d.editTask=c,d.deleteTask=u,o()}angular.module("shinyDeploy").controller("DeploymentsAddController",e),e.$inject=["$location","deploymentsService","alertsService"]}(),function(){"use strict";function e(e,t,n,o){function r(){n.getServers().then(function(e){f.servers=e},function(e){console.log("Error fetching servers: "+e)}),n.getRepositories().then(function(e){f.repositories=e},function(e){console.log("Error fetching repositories: "+e)});var o=t.deploymentId?parseInt(t.deploymentId):0;n.getDeploymentData(o).then(function(e){f.deployment=e,f.refreshBranches()},function(){e.path("/deployments")})}function s(){f.deployment.server_id=f.deployment.server.id,f.deployment.repository_id=f.deployment.repository.id,f.deployment.branch=f.deployment.branchObj.id,n.updateDeployment(f.deployment).then(function(){o.pushAlert("Deployment successfully updated.","success")},function(e){o.pushAlert(e,"warning")})}function i(){n.getRepositoryBranches(f.deployment.repository.id).then(function(e){f.branches=e},function(e){o.pushAlert(e,"warning")})}function l(){f.taskFormMode="add",f.task={},jQuery("#editTaskModal").modal("show")}function a(e){f.task=f.deployment.tasks[e],f.taskFormMode="edit",jQuery("#editTaskModal").modal("show")}function c(){f.deployment.hasOwnProperty("tasks")||(f.deployment.tasks=[]),f.deployment.tasks.push(f.task),f.task={},jQuery("#editTaskModal").modal("hide")}function u(){f.task={},jQuery("#editTaskModal").modal("hide")}function d(e){f.deployment.tasks.splice(e,1)}function p(){n.generateApiKey(f.deployment).then(function(e){if(!e.hasOwnProperty("apiKey"))return o.pushAlert("Could not generate API key.","warning"),!1;var t=location.protocol+"//"+location.hostname;t+="/api.php?ak="+e.apiKey+"&ap="+e.password,f.apiUrl=t},function(e){o.pushAlert(e,"warning")})}var f=this;f.isEdit=!0,f.servers={},f.repositories={},f.branches={},f.deployment={},f.task={},f.taskFormMode="add",f.apiUrl="",f.updateDeployment=s,f.refreshBranches=i,f.showAddTask=l,f.showEditTask=a,f.addTask=c,f.editTask=u,f.deleteTask=d,f.generateApiKey=p,r()}angular.module("shinyDeploy").controller("DeploymentsEditController",e),e.$inject=["$location","$routeParams","deploymentsService","alertsService"]}(),function(){"use strict";function e(e,t,n,o,r,s,i){function l(){var n=t.deploymentId?parseInt(t.deploymentId):0;r.getDeploymentData(n).then(function(e){R.deployment=e,a()},function(){e.path("/deployments")}),r.addEventListener("setLocalRevision",R.setLocalRevision),r.addEventListener("setRemoteRevision",R.setRemoteRevision),r.addEventListener("updateChangedFiles",R.updateChangedFiles),r.addEventListener("showDiff",R.showDiff),R.triggerSetLocalRevision(n),R.triggerSetRemoteRevision(n)}function a(){s.getServerData(R.deployment.server_id).then(function(e){R.deployment.server=e}),i.getRepositoryData(R.deployment.repository_id).then(function(e){R.deployment.repository=e})}function c(){R.changedFiles={},R.diff="",r.triggerJob("deploy",{deploymentId:R.deployment.id})}function u(){R.changedFiles={},R.diff="",r.triggerJob("getChangedFiles",{deploymentId:R.deployment.id})}function d(e){r.triggerJob("getFileDiff",{repositoryId:R.deployment.repository_id,localRevision:R.localRevision,remoteRevision:R.remoteRevision,file:R.changedFiles[e].file})}function p(e){r.triggerJob("setRemoteRevision",{deploymentId:e})}function f(e){r.triggerJob("setLocalRevision",{deploymentId:e})}function y(e){n.$apply(function(){R.changedFiles=e.changedFiles})}function m(e){e.hasOwnProperty("diff")&&null!==e.diff&&n.$apply(function(){R.diff=o.trustAsHtml(Diff2Html.getPrettyHtmlFromDiff(e.diff))})}function h(e){n.$apply(function(){R.remoteRevision=e.revision?e.revision:"n/a"})}function v(e){n.$apply(function(){R.localRevision=e.revision?e.revision:"n/a"})}function g(){R.changedFiles={}}function w(){R.diff=""}function D(){r.getDeploymentLogs(R.deployment.id).then(function(e){R.deploymentLogs=e},function(e){console.log(e)})}function k(){R.deploymentLogs=[]}var R=this;R.deployment={},R.changedFiles={},R.diff="",R.remoteRevision="",R.localRevision="",R.deploymentLogs=[],R.triggerDeploy=c,R.triggerGetChangedFiles=u,R.triggerShowDiff=d,R.triggerSetLocalRevision=f,R.triggerSetRemoteRevision=p,R.updateChangedFiles=y,R.showDiff=m,R.setLocalRevision=v,R.setRemoteRevision=h,R.closeChangedFiles=g,R.closeDiff=w,R.showDeploymentLogs=D,R.closeDeploymentLogs=k,l()}angular.module("shinyDeploy").controller("DeploymentsRunController",e),e.$inject=["$location","$routeParams","$scope","$sce","deploymentsService","serversService","repositoriesService","ws"]}(),function(){"use strict";function e(){}angular.module("shinyDeploy").controller("HomeController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e,t){function n(){var n;n=e.$on("alertMessage",function(e,t,n){s.addAlert(t,n)}),e.$on("$destroy",n);var o=t.getQueuedAlert();""!==o&&s.addAlert(o.message,o.type)}function o(e,t){s.alerts.push({msg:e,type:t})}function r(e){s.alerts.splice(e,1)}var s=this;s.alerts=[],s.addAlert=o,s.removeAlert=r,n()}angular.module("shinyDeploy").controller("AlertsController",e),e.$inject=["$scope","alertsService"]}(),function(){"use strict";function e(e,t){function n(e){for(var t=e.text.split("\n"),n=0;n<t.length;n++)o({message:t[n],styleclass:e.hasOwnProperty("type")?"log-"+e.type:"log-default",time:e.hasOwnProperty("time")?e.time:r(),source:e.hasOwnProperty("source")?e.source:""});$(".nano").nanoScroller().nanoScroller({scroll:"bottom"})}function o(t){e.$apply(function(){s.logs.push(t)})}function r(){var e=new Date;return(e.getHours()<10?"0":"")+e.getHours()+":"+(e.getMinutes()<10?"0":"")+e.getMinutes()+":"+(e.getSeconds()<10?"0":"")+e.getSeconds()}var s=this;s.logs=[],t.addListener("log",function(e){n(e)})}angular.module("shinyDeploy").controller("LogController",e),e.$inject=["$scope","ws"]}(),function(){"use strict";function e(e){function t(t){return e.path().substr(0,t.length)==t}var n=this;n.getClass=t}angular.module("shinyDeploy").controller("MenuController",e),e.$inject=["$location"]}(),function(){"use strict";function e(e,t,n){function o(){n.addListener("notification",function(e){var t=e.text,n="undefined"!=typeof e.type?e.type:"default";r(t,n)})}function r(n,o){e.$apply(function(){i.notifications.push({msg:n,type:o,id:"notification-"+i.notificationsCount}),t(s,5e3),i.notificationsCount++})}function s(){i.notifications.splice(0,1)}var i=this;i.notifications=[],i.notificationsCount=0,o()}angular.module("shinyDeploy").controller("NotificationsController",e),e.$inject=["$scope","$timeout","ws"]}(),function(){"use strict";function e(e,t,n,o){function r(){e(function(){n.systemUserExists().then(function(e){e.hasOwnProperty("userExists")&&e.userExists!==!0&&(l.systemUserExists=!1)})},100)}function s(){n.login(l.password).then(function(e){e.hasOwnProperty("success")&&e.success===!0?(n.setToken(e.token),t.path("/")):o.pushAlert("Login failed.","error")},function(e){o.pushAlert(e,"error")})}function i(){n.createSystemUser(l.password,l.password_verify).then(function(e){return e.hasOwnProperty("success")&&e.success===!0?(l.systemUserExists=!0,o.pushAlert("System user successfully created.","success"),!0):(o.pushAlert("Error while creating system user. Check logfile for details","error"),!1)},function(e){o.pushAlert(e,"error")})}var l=this;l.password="",l.password_verify="",l.systemUserExists=!0,l.login=s,l.createSystemUser=i,r()}angular.module("shinyDeploy").controller("LoginController",e),e.$inject=["$timeout","$location","auth","alertsService"]}(),function(){"use strict";function e(e,t){function n(){e.getRepositories().then(function(e){s.repositories=e},function(e){console.log("Error fetching repositories: "+e)})}function o(){return s.repositories}function r(n){e.deleteRepository(n).then(function(){for(var e=s.repositories.length-1;e>=0;e--)if(s.repositories[e].id===n){s.repositories.splice(e,1);break}t.pushAlert("Repository successfully deleted.","success")},function(e){t.pushAlert(e,"warning")})}var s=this;s.repositories={},s.getRepositories=o,s.deleteRepository=r,n()}angular.module("shinyDeploy").controller("RepositoriesController",e),e.$inject=["repositoriesService","alertsService"]}(),function(){"use strict";function e(e,t,n){function o(){t.addRepository(r.repository).then(function(){e.path("/repositories"),n.queueAlert("Repository successfully added.","success")},function(e){n.pushAlert(e,"warning")})}var r=this;r.isAdd=!0,r.repository={},r.addRepository=o}angular.module("shinyDeploy").controller("RepositoriesAddController",e),e.$inject=["$location","repositoriesService","alertsService"]}(),function(){"use strict";function e(e,t,n,o){function r(){var o=t.repositoryId?parseInt(t.repositoryId):0;n.getRepositoryData(o).then(function(e){i.repository=e},function(){e.path("/repositories")})}function s(){n.updateRepository(i.repository).then(function(){o.pushAlert("Repository successfully updated.","success")},function(e){o.pushAlert(e,"warning")})}var i=this;i.isEdit=!0,i.repository={},i.updateRepository=s,r()}angular.module("shinyDeploy").controller("RepositoriesEditController",e),e.$inject=["$location","$routeParams","repositoriesService","alertsService"]}(),function(){"use strict";function e(e,t){function n(){e.getServers().then(function(e){s.servers=e},function(e){console.log("Error fetching servers: "+e)})}function o(){return s.servers}function r(n){e.deleteServer(n).then(function(){for(var e=s.servers.length-1;e>=0;e--)if(s.servers[e].id===n){s.servers.splice(e,1);break}t.pushAlert("Server successfully deleted.","success")},function(e){t.pushAlert(e,"warning")})}var s=this;s.servers={},s.getServers=o,s.deleteServer=r,n()}angular.module("shinyDeploy").controller("ServersController",e),e.$inject=["serversService","alertsService"]}(),function(){"use strict";function e(e,t,n){function o(){t.addServer(r.server).then(function(){e.path("/servers"),n.queueAlert("Server successfully added.","success")},function(e){n.pushAlert(e,"warning")})}var r=this;r.isAdd=!0,r.server={},r.addServer=o}angular.module("shinyDeploy").controller("ServersAddController",e),e.$inject=["$location","serversService","alertsService"]}(),function(){"use strict";function e(e,t,n,o){function r(){var o=t.serverId?parseInt(t.serverId):0;n.getServerData(o).then(function(e){e.hasOwnProperty("port")&&(e.port=parseInt(e.port)),i.server=e},function(){e.path("/servers")})}function s(){n.updateServer(i.server).then(function(){o.pushAlert("Server successfully updated.","success")},function(e){o.pushAlert(e,"warning")})}var i=this;i.isEdit=!0,i.server={},i.updateServer=s,r()}angular.module("shinyDeploy").controller("ServersEditController",e),e.$inject=["$location","$routeParams","serversService","alertsService"]}();